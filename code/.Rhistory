viewers = c(10.51,9.37,7.51,6.53,3.83)
ratings = c(55,51,73,68,115)
seasons = c(1,2,3,4,5)
plot(seasons, ratings, "h", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(seasons, ratings, cex=0.6, pos=4, col="red")
plot(seasons, ratings, "l", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(seasons, ratings, cex=0.6, pos=4, col="red")
plot(seasons, ratings, "b", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(seasons, ratings, cex=0.6, pos=4, col="red")
plot(seasons, ratings, "b", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
plot(seasons, ratings, "b", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(ratings, cex=0.6, pos=4, col="red")
plot(seasons, ratings, "b", main="Ratings (Season Wise)", ylab = "Ratings", xlab = "Season", pch=18, col="blue")
text(seasons, ratings, ratings, cex=0.6, pos=4, col="red")
earthquakes.dat <- read.delim("/Users/vikrambahadur/Downloads/earthquakes.txt")
View(earthquakes.dat)
View(earthquakes.dat)
y.dat=earthquakes.dat$Quakes[1:100]
y.new=earthquakes.dat$Quakes[101:103]
covid.dat <- read.delim("/Users/vikrambahadur/Downloads/GoogleSearchIndex.txt")
covid.dat$Week=as.Date(covid.dat$Week,format = '%Y-%m-%d')
library(readr)
library(sfdep)
require(sp)
install.packages("sp")
require(spdep)
install.packages("sfdep")
install.packages("spdep")
install.packages("spdep")
install.packages("readr")
install.packages("ggplot2")
install.packages("ggthemes")
library(sf)
data_municipalities <- read_csv("../data/data_municipalities.csv")
library(sf)
library(sfdep)
library(sp)
library(spdep)
library(readr)
library(ggplot2)
library(ggthemes)
data_municipalities <- read_csv("../data/data_municipalities.csv")
library(dplyr)
install.packages("dplyr")
library(dplyr)
library(sf)
library(sfdep)
library(sp)
library(spdep)
library(readr)
library(ggplot2)
library(ggthemes)
data_municipalities <- read_csv("../data/data_municipalities.csv")
data_municipalities <- read_csv("/Users/vikrambahadur/reproducible_research/EC2024/EC2024/data/data_municipalities.csv")
map_municipalities <- st_read("/Users/vikrambahadur/reproducible_research/EC2024/EC2024/data/shapefile/map_municipalities.shp")
map_municipalities <- st_read("/Users/vikrambahadur/reproducible_research/EC2024/EC2024/data/shapefile/map_municipalities.shp")
plot(st_geometry(map_municipalities))
which(!map_municipalities$mncplty_c %in% data_municipalities$municipality_code)
which(!data_municipalities$municipality_code %in% map_municipalities$mncplty_c )
map_municipalities_with_data <-
map_municipalities %>%
left_join(data_municipalities,
by = join_by(mncplty_c == municipality_code))
ggplot(map_municipalities_with_data,
aes(fill = percent_vaccinated)) +
geom_sf() +
ggthemes::theme_map() +
scale_fill_continuous()
map_partitions <- st_read("../_data/shapefile/map_partitions.shp")
map_partitions <- st_read("/Users/vikrambahadur/reproducible_research/EC2024/EC2024/data/shapefile/map_partitions.shp")
ggplot() +
geom_sf(data = map_partitions,
aes(fill = partition)) +
ggthemes::theme_map()
ggplot() +
geom_sf(data = map_municipalities_with_data,
aes(fill = percent_vaccinated)) +
ggthemes::theme_map() +
scale_fill_continuous() +
geom_sf(data = map_partitions,
size = 2,
color = "red",
fill = NA)
#---------------------------------------------------------------
# creating spatial weight matrix - contiguity (i.e. common border)
municipalities_neighbours <- sfdep::st_contiguity(map_municipalities)
# lets check its structure
glimpse(municipalities_neighbours)
# converting a list of neighbours into a matrix
spatial_weights <- nb2mat(municipalities_neighbours)
# you can check if it is row standardized by default
summary(rowSums(spatial_weights))
map_municipalities_with_data$splag_percent_vaccinated <-
spatial_weights %*% as.matrix(map_municipalities_with_data$percent_vaccinated)
View(map_partitions)
ggplot() +
geom_sf(data = map_partitions,
aes(fill = partition)) +
ggthemes::theme_map()
load("../Data/got/season_1.RData")
View(season_data)
## Clean any local/environment variables
rm(list = ls())
## Get this script present location
LOC_CODE = dirname(rstudioapi::getSourceEditorContext()$path)
print(LOC_CODE)
## Set it to working direcotry
setwd(LOC_CODE)
library(xts)
library(lmtest)
library(tidyverse)
options(scipen = 999)
source("../code/functions/testdf.R")
TS <- read.csv("../data/TSA_2024_project_data_1.csv")
TS$date <- as.Date(TS$date, format = "%Y-%m-%d")
TS <- xts(TS[, -1], order.by = TS$date)
TS$dy1 <- diff.xts(TS$y1)
TS$dy2 <- diff.xts(TS$y2)
TS$dy3 <- diff.xts(TS$y3)
TS$dy4 <- diff.xts(TS$y4)
TS$dy5 <- diff.xts(TS$y5)
TS$dy6 <- diff.xts(TS$y6)
TS$dy7 <- diff.xts(TS$y7)
TS$dy8 <- diff.xts(TS$y8)
TS$dy9 <- diff.xts(TS$y9)
TS$dy10 <- diff.xts(TS$y10)
index(TS)
TS_SHORT <- TS[index(TS) < as.Date("2022-03-08"),]
TS_TEST <- TS[index(TS) > as.Date("2022-03-07"),]
plot(DF,
# this options allows to put every series in a different panel
multi.panel = TRUE,
main = "Quotations of for US companies in 2005-2017",
col = c("black", "blue", "green", "yellow", "brown", "red", "orange", "khaki", "skyblue", "purple"),
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
yaxis.same = FALSE, # otherwise scale is the same for each column!
lwd = 0.75,
cex = .5)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(TS_SHORT$y4[-1,])
par(mfrow = c(2, 1)) # c(rows, columns)
acf(TS_SHORT$dy4[-1,], lag.max = 100)
pacf(TS_SHORT$dy4[-1,], lag.max = 100)
par(mfrow = c(1, 1))
plot(TS_SHORT$y4[-1,])
auto.arima(TS_SHORT$dy4[-1,]) #Result is ARIMA(0,0,4)
auto.arima(TS_SHORT$dy8[-1,]) #Result is ARIMA(0,0,1)
par(mfrow = c(1, 1))
par(mfrow = c(2, 1))
acf(TS_SHORT$dy4,
lag.max = 36, # max lag for ACF
ylim = c(-0.1, 0.1),   # limits for the y axis - we give c(min, max)
lwd = 5,               # line width
col = "dark green",
na.action = na.pass)   # do not stop if there are missing values in the data
pacf(TS_SHORT$dy4,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1)) # we restore the original single panel
# it gives 4,1,4
arima111 <- Arima(TS_SHORT$y4,order = c(1, 1, 1))
arima111
coeftest(arima111)
summary(arima111)
arima111_2 <- Arima(TS_SHORT$y4,order = c(1, 1, 1), include.constant = TRUE)
coeftest(arima111_2)
############### Y4 ################
###################################
par(mfrow = c(2, 1)) # c(rows, columns)
acf(TS_SHORT$dy4,
lag.max = 36, # max lag for ACF
ylim = c(-0.1, 0.1),   # limits for the y axis - we give c(min, max)
lwd = 5,               # line width
col = "dark green",
na.action = na.pass)   # do not stop if there are missing values in the data
pacf(TS_SHORT$dy4,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
arima111 <- Arima(TS_SHORT$y4,order = c(1, 1, 1))
coeftest(arima111)
summary(arima111)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(resid(arima111),
lag.max = 36,
ylim = c(-0.1, 0.1),
lwd = 5, col = "dark green",
na.action = na.pass)
pacf(resid(arima111),
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
Box.test(resid(arima111),type = "Ljung-Box", lag = 10)
arima414 <- Arima(TS_SHORT$y4,order = c(4, 1, 4))
coeftest(arima414)
summary(arima414)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(resid(arima414),
lag.max = 36,
ylim = c(-0.1, 0.1),
lwd = 5, col = "dark green",
na.action = na.pass)
pacf(resid(arima414),
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
Box.test(resid(arima414),type = "Ljung-Box", lag = 10)
arima014 <- Arima(TS_SHORT$y4,order = c(0, 1, 4))
coeftest(arima014)
summary(arima014)
Box.test(resid(arima014),type = "Ljung-Box", lag = 10)
AIC(arima111, arima414, arima014)
BIC(arima111, arima414, arima014)
auto.arima(TS_SHORT$y8) #Result is ARIMA(0,0,4)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(TS_SHORT$dy8,
lag.max = 36, # max lag for ACF
ylim = c(-0.1, 0.1),   # limits for the y axis - we give c(min, max)
lwd = 5,               # line width
col = "dark green",
na.action = na.pass)   # do not stop if there are missing values in the data
pacf(TS_SHORT$dy8,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
arima8_111 <- Arima(TS_SHORT$y8,order = c(1, 1, 1))
coeftest(arima8_111)
summary(arima8_111)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(resid(arima8_111),
lag.max = 36,
ylim = c(-0.1, 0.1),
lwd = 5, col = "dark green",
na.action = na.pass)
pacf(resid(arima8_111),
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
Box.test(resid(arima8_111),type = "Ljung-Box", lag = 10)
arima8_810 <- Arima(TS_SHORT$y8,order = c(8, 1, 0))
coeftest(arima8_810)
summary(arima8_810)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(resid(arima8_810),
lag.max = 36,
ylim = c(-0.1, 0.1),
lwd = 5, col = "dark green",
na.action = na.pass)
pacf(resid(arima8_810),
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
Box.test(resid(arima8_810),type = "Ljung-Box", lag = 10)
arima8_810_Reduced_ars <- Arima(TS_SHORT$y8,order = c(8, 1, 0),
fixed=c(NA, 0, 0, NA,NA, 0, 0, NA))
coeftest(arima8_810_Reduced_ars)
summary(arima8_810_Reduced_ars)
Box.test(resid(arima8_810_Reduced_ars),type = "Ljung-Box", lag = 10)
AIC(arima8_111, arima8_810, arima8_810_Reduced_ars)
BIC(arima8_111, arima8_810, arima8_810_Reduced_ars)
####### forecasting
TS_TEST
arima014
forecasts_y4 <- forecast(arima014, h = length(TS_TEST))
arima014 <- Arima(TS_SHORT$y4,order = c(0, 1, 4))
arima111 <- Arima(TS_SHORT$y4,order = c(1, 1, 1))
## Get this script present location
LOC_CODE = dirname(rstudioapi::getSourceEditorContext()$path)
print(LOC_CODE)
## Set it to working direcotry
setwd(LOC_CODE)
library(xts)
library(lmtest)
library(tidyverse)
library(forecast)
options(scipen = 999)
source("../code/functions/testdf.R")
TS <- read.csv("../data/TSA_2024_project_data_1.csv")
TS$date <- as.Date(TS$date, format = "%Y-%m-%d")
TS <- xts(TS[, -1], order.by = TS$date)
TS$dy1 <- diff.xts(TS$y1)
TS$dy2 <- diff.xts(TS$y2)
TS$dy3 <- diff.xts(TS$y3)
TS$dy4 <- diff.xts(TS$y4)
TS$dy5 <- diff.xts(TS$y5)
TS$dy6 <- diff.xts(TS$y6)
TS$dy7 <- diff.xts(TS$y7)
TS$dy8 <- diff.xts(TS$y8)
TS$dy9 <- diff.xts(TS$y9)
TS$dy10 <- diff.xts(TS$y10)
index(TS)
TS_SHORT <- TS[index(TS) < as.Date("2022-03-08"),]
TS_TEST <- TS[index(TS) > as.Date("2022-03-07"),]
plot(DF,
# this options allows to put every series in a different panel
multi.panel = TRUE,
main = "Quotations of for US companies in 2005-2017",
col = c("black", "blue", "green", "yellow", "brown", "red", "orange", "khaki", "skyblue", "purple"),
major.ticks = "years",
grid.ticks.on = "years",
grid.ticks.lty = 3,
yaxis.same = FALSE, # otherwise scale is the same for each column!
lwd = 0.75,
cex = .5)
Y <- c('y1', 'y2', 'y3', 'y4', 'y5', 'y6', 'y7', 'y8', 'y9', 'y10')
df_res <- data.frame(pair=NULL, p_adf=NULL,p_bg=NULL, result=NULL, cointegration_vector=NULL)
cointvec <- "NULL"
for (i in 1:9) {
for (j in (i + 1):10) {
print(paste("(y=",i,",y=",j,")"))
model.coint <- lm(formula = paste(Y[i], "~", Y[j]), data = TS)
redf <- testdf(variable = residuals(model.coint), max.augmentations = 3)
print(redf)
if (redf$p_adf[1] < .05) {
result <- "Conintegrated"
cointvec = paste("[1,",unname(coef(model.coint))[1], ",",unname(coef(model.coint))[2],"]")
} else {
result <- "Not Conintegrated"
cointvec <- ""
}
new_row <- data.frame(pair=paste("(y=",i,",y=",j,")"), p_adf=redf$p_adf[1], p_bg=redf$p_bg[1], result=result, cointegration_vector=cointvec)
df_res <- rbind(df_res, new_row)
}
}
print(TS_SHORT$dy4[-1,])
par(mar = rep(2, 4))
par(mfrow = c(2, 1)) # c(rows, columns)
acf(TS_SHORT$y4[-1,])
pacf(TS_SHORT$y4[-1,])
par(mfrow = c(1, 1))
par(mfrow = c(2, 1)) # c(rows, columns)
acf(TS_SHORT$dy4[-1,], lag.max = 100)
pacf(TS_SHORT$dy4[-1,], lag.max = 100)
par(mfrow = c(1, 1))
plot(TS_SHORT$y4[-1,])
auto.arima(TS_SHORT$dy4[-1,]) #Result is ARIMA(0,0,4)
auto.arima(TS_SHORT$dy8[-1,]) #Result is ARIMA(0,0,1)
par(mfrow = c(1, 1))
par(mfrow = c(2, 1))
acf(TS_SHORT$dy4,
lag.max = 36, # max lag for ACF
ylim = c(-0.1, 0.1),   # limits for the y axis - we give c(min, max)
lwd = 5,               # line width
col = "dark green",
na.action = na.pass)   # do not stop if there are missing values in the data
pacf(TS_SHORT$dy4,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1)) # we restore the original single panel
# it gives 4,1,4
arima111 <- Arima(TS_SHORT$y4,order = c(1, 1, 1))
arima111
coeftest(arima111)
summary(arima111)
arima111_2 <- Arima(TS_SHORT$y4,order = c(1, 1, 1), include.constant = TRUE)
coeftest(arima111_2)
############### Y4 ################
###################################
par(mfrow = c(2, 1)) # c(rows, columns)
acf(TS_SHORT$dy4,
lag.max = 36, # max lag for ACF
ylim = c(-0.1, 0.1),   # limits for the y axis - we give c(min, max)
lwd = 5,               # line width
col = "dark green",
na.action = na.pass)   # do not stop if there are missing values in the data
pacf(TS_SHORT$dy4,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
arima111 <- Arima(TS_SHORT$y4,order = c(1, 1, 1))
coeftest(arima111)
summary(arima111)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(resid(arima111),
lag.max = 36,
ylim = c(-0.1, 0.1),
lwd = 5, col = "dark green",
na.action = na.pass)
pacf(resid(arima111),
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
Box.test(resid(arima111),type = "Ljung-Box", lag = 10)
arima414 <- Arima(TS_SHORT$y4,order = c(4, 1, 4))
coeftest(arima414)
summary(arima414)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(resid(arima414),
lag.max = 36,
ylim = c(-0.1, 0.1),
lwd = 5, col = "dark green",
na.action = na.pass)
pacf(resid(arima414),
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
Box.test(resid(arima414),type = "Ljung-Box", lag = 10)
arima014 <- Arima(TS_SHORT$y4,order = c(0, 1, 4))
coeftest(arima014)
summary(arima014)
Box.test(resid(arima014),type = "Ljung-Box", lag = 10)
AIC(arima111, arima414, arima014)
BIC(arima111, arima414, arima014)
auto.arima(TS_SHORT$y8) #Result is ARIMA(0,0,4)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(TS_SHORT$dy8,
lag.max = 36, # max lag for ACF
ylim = c(-0.1, 0.1),   # limits for the y axis - we give c(min, max)
lwd = 5,               # line width
col = "dark green",
na.action = na.pass)   # do not stop if there are missing values in the data
pacf(TS_SHORT$dy8,
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
arima8_111 <- Arima(TS_SHORT$y8,order = c(1, 1, 1))
coeftest(arima8_111)
summary(arima8_111)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(resid(arima8_111),
lag.max = 36,
ylim = c(-0.1, 0.1),
lwd = 5, col = "dark green",
na.action = na.pass)
pacf(resid(arima8_111),
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
Box.test(resid(arima8_111),type = "Ljung-Box", lag = 10)
arima8_810 <- Arima(TS_SHORT$y8,order = c(8, 1, 0))
coeftest(arima8_810)
summary(arima8_810)
par(mfrow = c(2, 1)) # c(rows, columns)
acf(resid(arima8_810),
lag.max = 36,
ylim = c(-0.1, 0.1),
lwd = 5, col = "dark green",
na.action = na.pass)
pacf(resid(arima8_810),
lag.max = 36,
lwd = 5, col = "dark green",
na.action = na.pass)
par(mfrow = c(1, 1))
Box.test(resid(arima8_810),type = "Ljung-Box", lag = 10)
arima8_810_Reduced_ars <- Arima(TS_SHORT$y8,order = c(8, 1, 0),
fixed=c(NA, 0, 0, NA,NA, 0, 0, NA))
coeftest(arima8_810_Reduced_ars)
summary(arima8_810_Reduced_ars)
Box.test(resid(arima8_810_Reduced_ars),type = "Ljung-Box", lag = 10)
AIC(arima8_111, arima8_810, arima8_810_Reduced_ars)
BIC(arima8_111, arima8_810, arima8_810_Reduced_ars)
####### forecasting
TS_TEST
forecasts_y4 <- forecast(arima014, h = length(TS_TEST))
library(forecast)
library(ggplot2)
autoplot(ts(forecasts_y4)) + autolayer(ts(TS_TEST$dy4))
plot(forecasts_y4, main = "Forecast vs Actuals", col = "blue")
lines(TS_TEST$y4, col = "red")
lines(TS_TEST$dy4, col = "red")
plot(forecasts_y4, main = "Forecast vs Actuals", col = "blue")
lines(TS_TEST$dy4, col = "red")
View(TS_TEST)
lines(TS_TEST$dy4, col = "red")
lines(TS_TEST, col = "red")
print(forecasts_y4)
print(TS_TEST$y4)
length(forecasts_y4)
print(forecasts_y4)
length(TS_TEST)
forecasts_y4 <- forecast(arima014, h = length(TS_TEST$y4))
length(TS_TEST)
View(TS_TEST)
length(TS_TEST)
forecasts_y4 <- forecast(arima014, h = length(20))
length(forecasts_y4)
print(forecasts_y4)
print(TS_TEST$y4)
forecasts_y4 <- forecast(arima014, h = 20)
length(TS_TEST)
length(forecasts_y4)
print(forecasts_y4)
print(TS_TEST$y4)
plot(forecasts_y4, main = "Forecast vs Actuals", col = "blue")
lines(TS_TEST, col = "red")
lines(TS_TEST$y4, col = "red")
plot(forecasts_y4, main = "Forecast vs Actuals", col = "blue")
lines(TS_TEST$y4, col = "red")
lines(TS_TEST$dy4, col = "red")
accuracy_measures_y4 <- accuracy(forecasts_y4, TS_TEST$y4)
print(accuracy_measures_y4)
plot(forecasts_y4, main = "Forecast vs Actuals", col = "blue")
forecasts_y8 <- forecast(arima8_810_Reduced_ars, h = 20)
plot(forecasts_y8, main = "Forecast vs Actuals", col = "blue")
lines(TS_TEST$y8, col = "red")
accuracy_measures_y8 <- accuracy(forecasts_y8, TS_TEST$y8)
print(accuracy_measures_y8)
